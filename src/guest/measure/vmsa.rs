use libc::{c_uchar, c_uint, c_ulonglong, c_ushort};

/// VMCB Segment (struct vmcb_seg in the linux kernel)
#[repr(C)]
#[derive(Debug, Clone, Copy)]
pub struct VmcbSeg {
    selector: c_ushort,
    attrib: c_ushort,
    limit: c_uint,
    base: c_ulonglong,
}

/// VMSA page
///
/// The names of the fields are taken from struct sev_es_work_area in the linux kernel:
/// https://github.com/AMDESE/linux/blob/sev-snp-v12/arch/x86/include/asm/svm.h#L318
/// (following the definitions in AMD APM Vol 2 Table B-4)
#[repr(C)]
#[derive(Debug, Clone, Copy)]
pub struct SevEsSaveArea {
    es: VmcbSeg,
    cs: VmcbSeg,
    ss: VmcbSeg,
    ds: VmcbSeg,
    fs: VmcbSeg,
    gs: VmcbSeg,
    gdtr: VmcbSeg,
    ldtr: VmcbSeg,
    idtr: VmcbSeg,
    tr: VmcbSeg,
    vmpl0_ssp: c_ulonglong,
    vmpl1_ssp: c_ulonglong,
    vmpl2_ssp: c_ulonglong,
    vmpl3_ssp: c_ulonglong,
    u_cet: c_ulonglong,
    reserved_1: [c_uchar; 2],
    vmpl: c_uchar,
    cpl: c_uchar,
    reserved_2: [c_uchar; 4],
    efer: c_ulonglong,
    reserved_3: [c_uchar; 104],
    xss: c_ulonglong,
    cr4: c_ulonglong,
    cr3: c_ulonglong,
    cr0: c_ulonglong,
    dr7: c_ulonglong,
    dr6: c_ulonglong,
    rflags: c_ulonglong,
    rip: c_ulonglong,
    dr0: c_ulonglong,
    dr1: c_ulonglong,
    dr2: c_ulonglong,
    dr3: c_ulonglong,
    dr0_addr_mask: c_ulonglong,
    dr1_addr_mask: c_ulonglong,
    dr2_addr_mask: c_ulonglong,
    dr3_addr_mask: c_ulonglong,
    reserved_4: [c_uchar; 24],
    rsp: c_ulonglong,
    s_cet: c_ulonglong,
    ssp: c_ulonglong,
    isst_addr: c_ulonglong,
    rax: c_ulonglong,
    star: c_ulonglong,
    lstar: c_ulonglong,
    cstar: c_ulonglong,
    sfmask: c_ulonglong,
    kernel_gs_base: c_ulonglong,
    sysenter_cs: c_ulonglong,
    sysenter_esp: c_ulonglong,
    sysenter_eip: c_ulonglong,
    cr2: c_ulonglong,
    reserved_5: [c_uchar; 32],
    g_pat: c_ulonglong,
    dbgctrl: c_ulonglong,
    br_from: c_ulonglong,
    br_to: c_ulonglong,
    last_excp_from: c_ulonglong,
    last_excp_to: c_ulonglong,
    reserved_7: [c_uchar; 80],
    pkru: c_uint,
    reserved_8: [c_uchar; 20],
    reserved_9: c_ulonglong,
    rcx: c_ulonglong,
    rdx: c_ulonglong,
    rbx: c_ulonglong,
    reserved_10: c_ulonglong,
    rbp: c_ulonglong,
    rsi: c_ulonglong,
    rdi: c_ulonglong,
    r8: c_ulonglong,
    r9: c_ulonglong,
    r10: c_ulonglong,
    r11: c_ulonglong,
    r12: c_ulonglong,
    r13: c_ulonglong,
    r14: c_ulonglong,
    r15: c_ulonglong,
    reserved_11: [c_uchar; 16],
    guest_exit_info_1: c_ulonglong,
    guest_exit_info_2: c_ulonglong,
    guest_exit_int_info: c_ulonglong,
    guest_nrip: c_ulonglong,
    sev_features: c_ulonglong,
    vintr_ctrl: c_ulonglong,
    guest_exit_code: c_ulonglong,
    virtual_tom: c_ulonglong,
    tlb_id: c_ulonglong,
    pcpu_id: c_ulonglong,
    event_inj: c_ulonglong,
    xcr0: c_ulonglong,
    reserved_12: [c_uchar; 16],
    x87_dp: c_ulonglong,
    mxcsr: c_uint,
    x87_ftw: c_ushort,
    x87_fsw: c_ushort,
    x87_fcw: c_ushort,
    x87_fop: c_ushort,
    x87_ds: c_ushort,
    x87_cs: c_ushort,
    x87_rip: c_ulonglong,
    fpreg_x87: [c_uchar; 80],
    fpreg_xmm: [c_uchar; 256],
    fpreg_ymm: [c_uchar; 256],
    unused: [c_uchar; 2448],
}
